{"version":3,"sources":["logo.svg","components/map/Search.js","components/map/LoadScreen.js","components/map/map.js","mapStyles.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Search","panTo","usePlacesAutoComplete","requestOptions","location","lat","lng","radius","value","ready","suggestions","status","data","setValue","clearSuggestions","legend","document","getElementById","id","className","style","textShadow","color","onSelect","address","a","getGeocode","results","getLatLng","onChange","e","target","placeholder","zIndex","map","description","key","display","visibility","textAlign","onClick","innerHTML","height","LoadScreen","width","marginRight","marginLeft","marginTop","src","logo","alt","Component","libraries","options","styles","featureType","elementType","stylers","lightness","weight","disableDefaultUI","Map","useLoadScript","googleMapsApiKey","isLoaded","loadError","mapRef","React","useRef","onMapLoad","useCallback","current","setZoom","openLegend","fire","populateSearch","searchResults","fireResultsHtml","latitude","longitude","acq_date","confidence","scan","bright_t31","frp","satellite","mapContainerStyle","zoom","center","onLoad","fireData","position","parseFloat","console","log","icon","url","scaledSize","window","google","maps","Size","origin","Point","App","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cafd43c5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from \"react\";\r\nimport usePlacesAutoComplete, {\r\n  getGeocode,\r\n  getLatLng\r\n} from \"use-places-autocomplete\";\r\nimport {\r\n  Combobox,\r\n  ComboboxInput,\r\n  ComboboxPopover,\r\n  ComboboxOption\r\n} from \"@reach/combobox\";\r\n\r\n//Search Component\r\nexport function Search({ panTo }) {\r\n  /////////////////INIT VARS/////////////////////\r\n  const {\r\n    ready,\r\n    value,\r\n    suggestions: { status, data },\r\n    setValue,\r\n    clearSuggestions,\r\n  } = usePlacesAutoComplete({\r\n    requestOptions: {\r\n      location: { lat: () => 37.468319, lng: () => -122.143936 },\r\n      radius: 200 * 1000,\r\n    },\r\n  });\r\n  const legend = document.getElementById(\"search\");\r\n  \r\n  //////////////////Search Component layout///////////////\r\n  return (\r\n    <div id=\"search\" className=\"searchContainer\">\r\n      <div id = \"searchContents\">\r\n      <h3 id=\"searchHeader\" style={{ textShadow: \"4px 4px #111\", color: \"whitesmoke\" }}>\r\n        Active Fires\r\n      </h3>\r\n      <div id=\"searchBar\">\r\n\r\n        <Combobox\r\n          onSelect={async (address) => {\r\n            setValue(address, true);\r\n            clearSuggestions();\r\n            try {\r\n              const results = await getGeocode({ address });\r\n              const { lat, lng } = await getLatLng(results[0]);\r\n              panTo({ lat, lng });\r\n            } catch (error) { }\r\n          }}\r\n        >\r\n          <ComboboxInput\r\n            value={value}\r\n            onChange={(e) => {\r\n              setValue(e.target.value);\r\n            }}\r\n            placeholder=\"Enter an Address:\" />\r\n          <ComboboxPopover style={{ zIndex: 12 }}>\r\n            {status === \"OK\" &&\r\n              data.map(({ id, description }) => (\r\n                <div>\r\n                  <ComboboxOption\r\n                    key={id}\r\n                    style={{ zIndex: 12 }}\r\n                    value={description} />\r\n                </div>\r\n              ))}\r\n          </ComboboxPopover>\r\n        </Combobox>\r\n      </div>\r\n      <div\r\n        id=\"searchResults\"\r\n        style={{ display: \"none\", visibility: \"hidden\", textAlign: \"center\" }}\r\n      ></div>\r\n      <button\r\n        id=\"legendButton\"\r\n        style={{ visibility: \"hidden\" }}\r\n        onClick={async () => {\r\n          document.getElementById(\"legendButton\").style.visibility = \"hidden\";\r\n          document.getElementById(\"searchResults\").innerHTML = \"\";\r\n          legend.style.height = \"initial\";\r\n        }}\r\n      >\r\n        Close\r\n      </button>\r\n    </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from 'react';\r\nimport \"../../App.css\";\r\nimport logo from \"../../logo.svg\";\r\nexport default class LoadScreen extends Component {\r\n    render() {\r\n        return (\r\n            <div style={{height:\"100vh\", width:\"100vw\",marginRight:'auto',marginLeft:'auto',marginTop:'10em'}}>\r\n                <h1 style={{color:'whitesmoke', textShadow:'2px 2px black'}}>Loading Fire Data: </h1>\r\n                <img src={logo} className=\"App-logo\" alt=\"logo\"/>\r\n                <h5 style={{color:\"whitesmoke\",textShadow:\"2px 2px black\"}}>Powered by React.</h5>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport \"../../App.css\";\r\nimport { GoogleMap, useLoadScript, Marker } from \"@react-google-maps/api\";\r\nimport \"@reach/combobox/styles.css\";\r\nimport key from \"../../hidden.json\";\r\nimport mapStyles from \"../../mapStyles\";\r\nimport fireData from \"../../app.json\";\r\nimport { Search } from \"./Search\";\r\nimport LoadScreen from \"./LoadScreen\"\r\n//desired API libraries and options\r\nconst libraries = [\"places\"];\r\nconst options = {\r\n  styles: mapStyles,\r\n  disableDefaultUI: true,\r\n};\r\n\r\n//Map Component\r\nexport default function Map() {\r\n  //////////////////INIT VARS//////////////////////\r\n  //Loads Map w/API key and desired libraries\r\n  const { isLoaded, loadError } = useLoadScript({\r\n    googleMapsApiKey: key,\r\n    libraries,\r\n  });\r\n  //const to store Map coorinates in React.useRef()\r\n  const mapRef = React.useRef();\r\n  //fn applies any user input data into mapRef\r\n  const onMapLoad = React.useCallback((map) => {\r\n    mapRef.current = map;\r\n  }, []);\r\n\r\n  //fn Moves Map to user input location\r\n  const panTo = React.useCallback(({ lat, lng }) => {\r\n    mapRef.current.panTo({ lat, lng });\r\n    mapRef.current.setZoom(14);\r\n  }, []);\r\n\r\n  //Opens up Legend background then fills it with populateSearch()\r\n  const openLegend = (fire) => {\r\n    const legend = document.getElementById(\"search\");\r\n    legend.style.height = \"auto\";\r\n    const button = document.getElementById(\"legendButton\");\r\n    button.style.visibility = \"visible\";\r\n    populateSearch(fire);\r\n  };\r\n\r\n  //Grabs containers inside legend and populates it with json data via fireResultsHtml().\r\n  const populateSearch = (fire) => {\r\n    const searchResults = document.getElementById(\"searchResults\");\r\n    searchResults.innerHTML = \"\";\r\n    searchResults.innerHTML += fireResultsHtml(fire);\r\n    searchResults.style.display = \"block\";\r\n    searchResults.style.visibility = \"visible\";\r\n    return {\r\n      searchResults,\r\n    };\r\n  };\r\n  //Grabs data for user selected fire.\r\n  const fireResultsHtml = (fire) => {\r\n    return `<div id=fireResults>\r\n      <h3 id=fireTitle>Coordinates:<br/>${fire.latitude}/${fire.longitude}</h3>\r\n      <h3 id=fireTitle>Date Discovered:<br/>${fire.acq_date}<h3/>\r\n      <h3 id=fireTitle>Probability:<br/>${fire.confidence}<h3/> \r\n      <h3 id=fireTitle>Scan:<br/>${fire.scan}</h3>\r\n      <h3 id=fireTitle>Bright T 31:<br/>${fire.bright_t31}</h3>\r\n      <h3 id=fireTitle>Satellite:<br/>${fire.frp}</h3>\r\n      <h3 id=fireTitle>Satellite:<br/>${fire.satellite}</h3>\r\n\r\n      <br/>\r\n    </div>`;\r\n  };\r\n\r\n  //Makes map fullscreen\r\n  const mapStyles = {\r\n    height: \"100vh\",\r\n    width: \"100%\",\r\n  };\r\n  \r\n\r\n\r\n  if (loadError) return \"Error Loading Data.\"\r\n  // TODO animation in place of Loading Fire Data.\r\n  if (!isLoaded) return <LoadScreen/>;\r\n  \r\n  ////////////////////////////Map Creation/////////////////////////\r\n\r\n  //Creates Map HTML\r\n  return (\r\n    <div>\r\n      {/* Inits the search Component and passes it the panTo fn */}\r\n      <Search panTo={panTo} />\r\n      {/* Google Map Component */}\r\n      <GoogleMap\r\n        mapContainerStyle={mapStyles}\r\n        zoom={8}\r\n        center={{lat: 37.468319,\r\n          lng: -122.143936}}\r\n        options={options}\r\n        onLoad={onMapLoad}\r\n      >\r\n        {/* Takes every JSON object in fireData and maps them to a Marker on the map */}\r\n        {fireData.map((fire) => (\r\n          <Marker\r\n            // TODO change key to lat lng and date.\r\n            key={fire.id}\r\n            position={{\r\n              lat: parseFloat(fire.latitude),\r\n              lng: parseFloat(fire.longitude),\r\n            }}\r\n            // on marker click pan to the location of the fire using panTo();\r\n            // Then openLegend(fire); with fire being the user's selected marker.\r\n            onClick={async () => {\r\n              console.log(fire.id);\r\n              const lat = parseFloat(fire.latitude);\r\n              const lng = parseFloat(fire.longitude);\r\n              panTo({ lat, lng });\r\n              openLegend(fire);\r\n            }}\r\n            // Actual Marker icon (ex. fire/flag etc)\r\n            icon={{\r\n              url: \"https://cdn140.picsart.com/268960205000211.png\",\r\n              scaledSize: new window.google.maps.Size(30, 30),\r\n              origin: new window.google.maps.Point(0, 0),\r\n            }}\r\n          />\r\n        ))}\r\n      </GoogleMap>\r\n    </div>\r\n  );\r\n}","export default [\r\n  {\r\n    featureType: \"all\",\r\n    elementType: \"labels.text.fill\",\r\n    stylers: [\r\n      {\r\n        color: \"#ffffff\",\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    featureType: \"all\",\r\n    elementType: \"labels.text.stroke\",\r\n    stylers: [\r\n      {\r\n        color: \"#000000\",\r\n      },\r\n      {\r\n        lightness: 13,\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    featureType: \"administrative\",\r\n    elementType: \"geometry.fill\",\r\n    stylers: [\r\n      {\r\n        color: \"#000000\",\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    featureType: \"administrative\",\r\n    elementType: \"geometry.stroke\",\r\n    stylers: [\r\n      {\r\n        color: \"#144b53\",\r\n      },\r\n      {\r\n        lightness: 14,\r\n      },\r\n      {\r\n        weight: 1.4,\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    featureType: \"landscape\",\r\n    elementType: \"all\",\r\n    stylers: [\r\n      {\r\n        color: \"#08304b\",\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    featureType: \"poi\",\r\n    elementType: \"geometry\",\r\n    stylers: [\r\n      {\r\n        color: \"#0c4152\",\r\n      },\r\n      {\r\n        lightness: 5,\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    featureType: \"road.highway\",\r\n    elementType: \"geometry.fill\",\r\n    stylers: [\r\n      {\r\n        color: \"#000000\",\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    featureType: \"road.highway\",\r\n    elementType: \"geometry.stroke\",\r\n    stylers: [\r\n      {\r\n        color: \"#0b434f\",\r\n      },\r\n      {\r\n        lightness: 25,\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    featureType: \"road.arterial\",\r\n    elementType: \"geometry.fill\",\r\n    stylers: [\r\n      {\r\n        color: \"#000000\",\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    featureType: \"road.arterial\",\r\n    elementType: \"geometry.stroke\",\r\n    stylers: [\r\n      {\r\n        color: \"#0b3d51\",\r\n      },\r\n      {\r\n        lightness: 16,\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    featureType: \"road.local\",\r\n    elementType: \"geometry\",\r\n    stylers: [\r\n      {\r\n        color: \"#000000\",\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    featureType: \"transit\",\r\n    elementType: \"all\",\r\n    stylers: [\r\n      {\r\n        color: \"#146474\",\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    featureType: \"water\",\r\n    elementType: \"all\",\r\n    stylers: [\r\n      {\r\n        color: \"#021019\",\r\n      },\r\n    ],\r\n  },\r\n];\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Map from \"./components/map/map\";\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      {/* Calls to Maps API for free cannot exceed 500. Disabled to prevent refreshes during development */}\r\n      <Map />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}