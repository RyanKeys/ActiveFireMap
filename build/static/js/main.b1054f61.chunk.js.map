{"version":3,"sources":["logo.svg","components/map/Search.js","components/map/LoadScreen.js","components/map/map.js","mapStyles.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Search","panTo","usePlacesAutoComplete","requestOptions","location","lat","lng","radius","value","ready","suggestions","status","data","setValue","clearSuggestions","id","className","style","textShadow","color","onSelect","address","a","getGeocode","results","getLatLng","url","parseFloat","window","pathname","onChange","e","target","placeholder","zIndex","map","description","key","display","visibility","textAlign","position","onClick","document","getElementById","innerHTML","overflow","margin","marginTop","marginBottom","href","LoadScreen","height","width","marginRight","marginLeft","src","logo","s","alt","Component","require","config","libraries","options","styles","featureType","elementType","stylers","lightness","weight","disableDefaultUI","Map","props","useLoadScript","googleMapsApiKey","process","REACT_APP_API_KEY","isLoaded","loadError","mapRef","React","useRef","onMapLoad","useCallback","current","setZoom","openLegend","fire","legend","button","populateSearch","searchResults","fireResultsHtml","console","log","latitude","longitude","acq_date","acq_time","scan","bright_ti4","frp","satellite","urlString","toString","includes","coordList","replace","split","newLat","Number","newLng","mapContainerStyle","zoom","center","onLoad","fires","icon","scaledSize","google","maps","Size","origin","Point","App","state","route","fetch","then","res","json","setState","this","apiCaller","forEach","apiHandler","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b1054f61.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport usePlacesAutoComplete, {\n  getGeocode,\n  getLatLng,\n} from \"use-places-autocomplete\";\nimport {\n  Combobox,\n  ComboboxInput,\n  ComboboxPopover,\n  ComboboxOption,\n} from \"@reach/combobox\";\n\n//Search Component\nexport function Search({ panTo }) {\n  /////////////////INIT VARS/////////////////////\n  const {\n    ready,\n    value,\n    suggestions: { status, data },\n    setValue,\n    clearSuggestions,\n  } = usePlacesAutoComplete({\n    requestOptions: {\n      location: { lat: () => 37.468319, lng: () => -122.143936 },\n      radius: 200 * 1000,\n    },\n  });\n  //////////////////Search Component layout///////////////\n  return (\n    <div id=\"search\" className=\"searchContainer\">\n      <div id=\"searchContents\">\n        <h3\n          id=\"searchHeader\"\n          style={{ textShadow: \"4px 4px #111\", color: \"whitesmoke\" }}\n        >\n          Active Fire Map\n        </h3>\n        <div id=\"searchBar\">\n          <Combobox\n            onSelect={async (address) => {\n              setValue(address, true);\n              clearSuggestions();\n              try {\n                const results = await getGeocode({ address });\n                const { lat, lng } = await getLatLng(results[0]);\n                var url = ``;\n                url = `location/${parseFloat(lat)},${parseFloat(lng)}`;\n                window.location.pathname = url;\n                panTo({ lat, lng });\n              } catch (error) {}\n            }}\n          >\n            <ComboboxInput\n              value={value}\n              onChange={(e) => {\n                setValue(e.target.value);\n              }}\n              placeholder=\"Enter an Address:\"\n            />\n            <ComboboxPopover style={{ zIndex: 12 }}>\n              {status === \"OK\" &&\n                data.map(({ id, description }) => (\n                  <div>\n                    <ComboboxOption\n                      key={id}\n                      style={{ zIndex: 12 }}\n                      value={description}\n                    />\n                  </div>\n                ))}\n            </ComboboxPopover>\n          </Combobox>\n        </div>\n        <div\n          id=\"searchResults\"\n          style={{ display: \"none\", visibility: \"hidden\", textAlign: \"center\" }}\n        ></div>\n        <button\n          id=\"legendButton\"\n          style={{ visibility: \"hidden\", position: \"absolute\" }}\n          onClick={async () => {\n            document.getElementById(\"legendButton\").style.visibility = \"hidden\";\n            document.getElementById(\"legendButton\").style.position = \"absolute\";\n            document.getElementById(\"searchResults\").innerHTML = \"\";\n            document.getElementById(\"search\").style.overflow = \"hidden\";\n          }}\n        >\n          Close\n        </button>\n        <p style={{ margin: 0, marginTop: \"1em\", marginBottom: \".4em\" }}>\n          <a style={{ color: \"#555\" }} href=\"Https://ryankeys.github.io\">\n            © Ryan Keys\n          </a>\n        </p>\n      </div>\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\nimport \"../../App.css\";\nimport logo from \"../../logo.svg\";\nexport default class LoadScreen extends Component {\n  render() {\n    return (\n      <div\n        style={{\n          height: \"100vh\",\n          width: \"100vw\",\n          marginRight: \"auto\",\n          marginLeft: \"auto\",\n        }}\n        id=\"loadScreen\"\n      >\n        <h1 style={{ color: \"whitesmoke\", textShadow: \"2px 2px black\" }}>\n          Loading Fire Data:{\" \"}\n        </h1>\n        <img src={logo} s className=\"App-logo\" alt=\"logo\" />\n        <h5\n          style={{\n            color: \"whitesmoke\",\n            textShadow: \"2px 2px black\",\n          }}\n        >\n          Powered by React.\n        </h5>\n        <h6 style={{ color: \"whitesmoke\" }}>\n          <a style={{ color: \"whitesmoke\" }} href=\"Https://github.com/RyanKeys\">\n            © Ryan Keys\n          </a>\n        </h6>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"../../App.css\";\nimport {\n  GoogleMap,\n  useLoadScript,\n  Marker,\n  DistanceMatrixServiceProps,\n} from \"@react-google-maps/api\";\nimport \"@reach/combobox/styles.css\";\nimport mapStyles from \"../../mapStyles\";\nimport { Search } from \"./Search\";\nimport LoadScreen from \"./LoadScreen\";\n\nconst dotenv = require(\"dotenv\");\ndotenv.config();\n//desired API libraries and options\nconst libraries = [\"places\"];\nconst options = {\n  styles: mapStyles,\n  disableDefaultUI: true,\n};\nvar markerSize = 50;\n//Map Component\nexport default function Map(props) {\n  //////////////////INIT VARS//////////////////////\n  //Loads Map w/API key and desired libraries\n  const { isLoaded, loadError } = useLoadScript({\n    googleMapsApiKey: process.env.REACT_APP_API_KEY,\n    libraries,\n  });\n  //const to store Map coorinates in React.useRef()\n  const mapRef = React.useRef();\n  //fn applies any user input data into mapRef\n  const onMapLoad = React.useCallback((map) => {\n    mapRef.current = map;\n  }, []);\n\n  //fn Moves Map to user input location\n  const panTo = React.useCallback(({ lat, lng }) => {\n    mapRef.current.panTo({ lat, lng });\n    mapRef.current.setZoom(14);\n  }, []);\n\n  //Opens up Legend background then fills it with populateSearch()\n  const openLegend = (fire) => {\n    const legend = document.getElementById(\"search\");\n    legend.style.height = \"auto\";\n    legend.style.overflow = \"auto\";\n    const button = document.getElementById(\"legendButton\");\n    button.style.visibility = \"visible\";\n    button.style.position = \"relative\";\n    button.style.zIndex = 10;\n    populateSearch(fire);\n  };\n\n  //Grabs containers inside legend and populates it with json data via fireResultsHtml().\n  const populateSearch = (fire) => {\n    const searchResults = document.getElementById(\"searchResults\");\n    searchResults.innerHTML = \"\";\n    searchResults.innerHTML += fireResultsHtml(fire);\n    searchResults.style.display = \"block\";\n    searchResults.style.visibility = \"visible\";\n    return {\n      searchResults,\n    };\n  };\n\n  //Grabs data for user selected fire.\n  const fireResultsHtml = (fire) => {\n    console.log(fire);\n    return `<div id=fireResults>\n      <h3 id=fireTitle>Coordinates:<br/>${fire.latitude}/${fire.longitude}</h3>\n      <h3 id=fireTitle>Date Discovered:<br/>${fire.acq_date}<h3/>\n      <h3 id=fireTitle>Time Discovered:<br/>${fire.acq_time}<h3/> \n      <h3 id=fireTitle>Scan:<br/>${fire.scan}</h3>\n      <h3 id=fireTitle>Bright T 31:<br/>${fire.bright_ti4}</h3>\n      <h3 id=fireTitle>Satellite:<br/>${fire.frp}</h3>\n      <h3 id=fireTitle>Satellite:<br/>${fire.satellite}</h3>\n      <br/>\n    </div>`;\n  };\n  \n  var urlString = window.location.pathname.toString();\n  if (urlString.includes(\"location\")) {\n    var coordList = urlString\n      .replace(\"location\", \"\")\n      .replace(\"//\", \"\")\n      .split(\",\");\n    var newLat = Number(coordList[0]);\n    var newLng = Number(coordList[1]);\n    console.log(newLat, newLng);\n  }\n\n  //Makes map fullscreen\n  const mapStyles = {\n    height: \"100vh\",\n    width: \"100%\",\n  };\n  if (loadError) return \"Error Loading Data.\";\n  // TODO animation in place of Loading Fire Data.\n  if (!isLoaded) return <LoadScreen />;\n\n  ////////////////////////////Map Creation/////////////////////////\n  //Creates Map HTML\n  return (\n    <div>\n      {/* Inits the search Component and passes it the panTo fn */}\n      <Search panTo={panTo} />\n      {/* Google Map Component */}\n      <GoogleMap\n        mapContainerStyle={mapStyles}\n        zoom={8}\n        center={{ lat: newLat || 37.468319, lng: newLng || -122.143936 }}\n        options={options}\n        onLoad={onMapLoad}\n      >\n        {/* Takes every JSON object in fireData and maps them to a Marker on the map */}\n        {props.fires.map((fire) => (\n          <Marker\n            // TODO change key to lat lng and date.\n            key={fire.id}\n            position={{\n              lat: parseFloat(fire.latitude),\n              lng: parseFloat(fire.longitude),\n            }}\n            // on marker click pan to the location of the fire using panTo();\n            // Then openLegend(fire); with fire being the user's selected marker.\n            onClick={async () => {\n              const lat = parseFloat(fire.latitude);\n              const lng = parseFloat(fire.longitude);\n              panTo({ lat, lng });\n              openLegend(fire);\n            }}\n            // Actual Marker icon (ex. fire/flag etc)\n            icon={{\n              url:\n                \"https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fcdn140.picsart.com%2F291118763013211.png&f=1&nofb=1\",\n              scaledSize: new window.google.maps.Size(markerSize, markerSize),\n              origin: new window.google.maps.Point(0, 0),\n            }}\n          />\n        ))}\n      </GoogleMap>\n    </div>\n  );\n}\n","export default [\n  {\n    featureType: \"all\",\n    elementType: \"labels.text.fill\",\n    stylers: [\n      {\n        color: \"#ffffff\",\n      },\n    ],\n  },\n  {\n    featureType: \"all\",\n    elementType: \"labels.text.stroke\",\n    stylers: [\n      {\n        color: \"#000000\",\n      },\n      {\n        lightness: 13,\n      },\n    ],\n  },\n  {\n    featureType: \"administrative\",\n    elementType: \"geometry.fill\",\n    stylers: [\n      {\n        color: \"#000000\",\n      },\n    ],\n  },\n  {\n    featureType: \"administrative\",\n    elementType: \"geometry.stroke\",\n    stylers: [\n      {\n        color: \"#144b53\",\n      },\n      {\n        lightness: 14,\n      },\n      {\n        weight: 1.4,\n      },\n    ],\n  },\n  {\n    featureType: \"landscape\",\n    elementType: \"all\",\n    stylers: [\n      {\n        color: \"#08304b\",\n      },\n    ],\n  },\n  {\n    featureType: \"poi\",\n    elementType: \"geometry\",\n    stylers: [\n      {\n        color: \"#0c4152\",\n      },\n      {\n        lightness: 5,\n      },\n    ],\n  },\n  {\n    featureType: \"road.highway\",\n    elementType: \"geometry.fill\",\n    stylers: [\n      {\n        color: \"#000000\",\n      },\n    ],\n  },\n  {\n    featureType: \"road.highway\",\n    elementType: \"geometry.stroke\",\n    stylers: [\n      {\n        color: \"#0b434f\",\n      },\n      {\n        lightness: 25,\n      },\n    ],\n  },\n  {\n    featureType: \"road.arterial\",\n    elementType: \"geometry.fill\",\n    stylers: [\n      {\n        color: \"#000000\",\n      },\n    ],\n  },\n  {\n    featureType: \"road.arterial\",\n    elementType: \"geometry.stroke\",\n    stylers: [\n      {\n        color: \"#0b3d51\",\n      },\n      {\n        lightness: 16,\n      },\n    ],\n  },\n  {\n    featureType: \"road.local\",\n    elementType: \"geometry\",\n    stylers: [\n      {\n        color: \"#000000\",\n      },\n    ],\n  },\n  {\n    featureType: \"transit\",\n    elementType: \"all\",\n    stylers: [\n      {\n        color: \"#146474\",\n      },\n    ],\n  },\n  {\n    featureType: \"water\",\n    elementType: \"all\",\n    stylers: [\n      {\n        color: \"#021019\",\n      },\n    ],\n  },\n];\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Map from \"./components/map/map\";\nclass App extends Component {\n  //On page load grabs data from API and pushes it into {this.state.fires}\n\n  //TODO Add route only accessible by site to get Google API key :) c: :p\n  state = { fires: [] };\n\n  //Fetches Data from given route.\n  apiCaller(route) {\n    fetch(route)\n      .then((res) => res.json())\n      .then((fires) => this.setState({ fires }));\n  }\n\n  //Handles users route selection and returns their desired JSON.\n  apiHandler(url) {\n    console.log(url);\n    if (url === \"/api/\") {\n      this.apiCaller(\"/api/fires\");\n    } else if (url.includes(\"location\")) {\n      this.apiCaller(url);\n    } else {\n      var routes = [\"/api/fires\", \"/api/usa\"].forEach((route) => {\n        console.log(route);\n        if (url === route) {\n          this.apiCaller(route);\n        }\n      });\n    }\n  }\n\n  componentDidMount() {\n    var url = `/api${window.location.pathname}`;\n    this.apiHandler(url);\n  }\n\n  render() {\n    console.log(this.state.fires);\n\n    return (\n      <div className=\"App\">\n        {/* Assigns this.state.fires to props.fires in child component */}\n        <Map fires={this.state.fires} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}